import { useEffect, useRef, useState } from "react";

interface ChatEntry {
  time: string;
  realm: string;
  user: string;
  text: string;
}

interface UseRealmChatSocketOptions {
  onError?: (message: string) => void;
  onNewMessage: (entry: ChatEntry) => void;
  pingInterval?: number;
  reconnectDelay?: number;
  maxReconnectAttempts?: number;
}

export const useRealmChatSocket = (
  realm: string,
  username: string,
  options?: UseRealmChatSocketOptions
) => {
  const [messages, setMessages] = useState<ChatEntry[]>([]);
  const [userCount, setUserCount] = useState(0);
  const [onlineUsers, setOnlineUsers] = useState<string[]>([]);
  const socketRef = useRef<WebSocket | null>(null);
  const reconnectTimeoutRef = useRef<number | null>(null);
  const pingIntervalRef = useRef<number | null>(null);
  const heartbeatTimeoutRef = useRef<number | null>(null);
  const { onError } = options || {};
  const [isConnected, setIsConnected] = useState(false);
  const [connectionStatus, setConnectionStatus] = useState<'disconnected' | 'connecting' | 'connected' | 'reconnecting'>('disconnected');
  const reconnectBlockedRef = useRef(false);
  const reconnectAttemptsRef = useRef(0);
  const maxReconnectAttempts = options?.maxReconnectAttempts ?? 10;

  const safeClose = () => {
    const sock = socketRef.current;
    if (sock) {
      // –£–±–∏—Ä–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã—Ç–∏–µ–º
      sock.onclose = null;
      sock.onerror = null;
      sock.onmessage = null;
      sock.onopen = null;
      
      if (
        sock.readyState === WebSocket.OPEN ||
        sock.readyState === WebSocket.CONNECTING
      ) {
        sock.close();
      }
    }
    socketRef.current = null;
  };

  const clearAllTimers = () => {
    clearInterval(pingIntervalRef.current!);
    clearTimeout(reconnectTimeoutRef.current!);
    clearTimeout(heartbeatTimeoutRef.current!);
    pingIntervalRef.current = null;
    reconnectTimeoutRef.current = null;
    heartbeatTimeoutRef.current = null;
  };

  const connect = () => {
    if (!realm || !username) return;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≤ —Å–∞–º–æ–º –Ω–∞—á–∞–ª–µ
    if (reconnectAttemptsRef.current >= maxReconnectAttempts) {
      console.error("üö´ Max reconnection attempts reached");
      setConnectionStatus('disconnected');
      onError?.("–ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è");
      return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–æ–∑–¥–∞–µ–º –ª–∏ –º—ã —É–∂–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    if (socketRef.current && socketRef.current.readyState === WebSocket.CONNECTING) {
      console.log("‚ö†Ô∏è Connection already in progress, skipping...");
      return;
    }
    
    // –ï—Å–ª–∏ —Å–æ–∫–µ—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–æ —É–∂–µ –∑–∞–∫—Ä—ã—Ç - –æ—á–∏—â–∞–µ–º –µ–≥–æ
    if (socketRef.current && socketRef.current.readyState === WebSocket.CLOSED) {
      console.log("üßπ Cleaning up closed socket");
      socketRef.current = null;
    }

    setConnectionStatus('connecting');
    reconnectBlockedRef.current = false;

    // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    safeClose();
    clearAllTimers();

    const socket = new WebSocket(import.meta.env.VITE_WS_URL);
    socketRef.current = socket;

    socket.onopen = () => {
      setIsConnected(true);
      setConnectionStatus('connected');
      reconnectAttemptsRef.current = 0; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
      console.log("‚úÖ WebSocket connected successfully");
      console.log("üì§ Sending subscription for realm:", realm, "username:", username);
      socket.send(JSON.stringify({ type: "subscribe", realm, username }));

      // –ø–∏–Ω–≥–∏ —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ —Å–æ–∫–µ—Ç –æ—Ç–∫—Ä—ã—Ç
      pingIntervalRef.current = window.setInterval(() => {
        if (socket.readyState === WebSocket.OPEN) {
          console.log("üíì Sending ping to server");
          socket.send(JSON.stringify({ type: "ping" }));
        }
      }, options?.pingInterval ?? 60_000); // 60 —Å–µ–∫—É–Ω–¥ (–±—ã–ª–æ 30_000)
    };

    socket.onmessage = (event) => {
      const data = JSON.parse(event.data);

      switch (data.type) {
        case "error":
          console.error("Server error:", data.message, "Code:", data.code);
          if (data.code === "duplicate_nick") {
            console.warn("üö´ Duplicate nickname detected, blocking reconnection");
            reconnectBlockedRef.current = true;
            // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –ø—Ä–∏ –æ—à–∏–±–∫–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∏–∫–∞
            setTimeout(() => {
              onError?.(data.message);
              safeClose();
            }, 2000); // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å 100ms –¥–æ 2000ms
          } else if (data.code === "rapid_reconnect") {
            console.warn("üö´ Rapid reconnection detected, adding delay");
            // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –ø—Ä–∏ —á–∞—Å—Ç—ã—Ö –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è—Ö
            setTimeout(() => {
              onError?.(data.message);
              safeClose();
            }, 3000); // 3 —Å–µ–∫—É–Ω–¥—ã –∑–∞–¥–µ—Ä–∂–∫–∏
          } else {
            onError?.(data.message);
            safeClose();
          }
          break;
        case "history":
          setMessages(data.entries);
          break;
        case "new_message":
          setMessages((prev) => [...prev, data.entry]);
          options?.onNewMessage?.(data.entry);
          break;
        case "user_count":
          setUserCount(data.count);
          break;
        case "online_users":
          setOnlineUsers(data.users);
          break;
        case "subscribe_success":
          // –£—Å–ø–µ—à–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ - —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
          reconnectBlockedRef.current = false;
          break;
        case "heartbeat":
          // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ heartbeat –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
          console.log("üíì Received heartbeat from server, sending pong");
          if (socket.readyState === WebSocket.OPEN) {
            socket.send(JSON.stringify({ type: "pong" }));
          }
          break;
        case "pong":
          // –°–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ –Ω–∞—à ping
          console.log("üíì Received pong from server");
          break;
      }
    };

    socket.onclose = (event) => {
      console.warn("‚ùå WebSocket closed", event.code, event.reason);
      setIsConnected(false);
      setConnectionStatus('disconnected');
      clearAllTimers();
      
      // –û—á–∏—â–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Å–æ–∫–µ—Ç
      socketRef.current = null;
      
      // –ù–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –ø—Ä–∏ graceful shutdown —Å–µ—Ä–≤–µ—Ä–∞
      if (event.code === 1000 && event.reason === 'Server shutdown') {
        console.log("üõë Server is shutting down, not reconnecting");
        onError?.("–°–µ—Ä–≤–µ—Ä –≤—ã–∫–ª—é—á–∞–µ—Ç—Å—è");
        return;
      }
      
      // —Ä–µ–∫–æ–Ω–µ–∫—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–∞–π–º–∞—É—Ç–∞
      if (!reconnectTimeoutRef.current && !reconnectBlockedRef.current) {
        reconnectAttemptsRef.current++;
        setConnectionStatus('reconnecting');
        
        // –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞: 1s, 2s, 4s, 8s, 16s, 30s, 30s...
        const baseDelay = options?.reconnectDelay ?? 1000;
        const delay = Math.min(baseDelay * Math.pow(2, reconnectAttemptsRef.current - 1), 30000);
        
        console.log(`üîÅ Reconnecting WebSocket... (attempt ${reconnectAttemptsRef.current}/${maxReconnectAttempts}, delay: ${delay}ms)`);
        
        reconnectTimeoutRef.current = window.setTimeout(() => {
          reconnectTimeoutRef.current = null;
          connect();
        }, delay);
      }
    };

    socket.onerror = (err) => {
      console.error("üõë WebSocket error:", err);
      setConnectionStatus('disconnected');
      
      // –ü—Ä–∏ –æ—à–∏–±–∫–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Ç–∞–∫–∂–µ –∑–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
      if (!reconnectTimeoutRef.current && !reconnectBlockedRef.current) {
        reconnectAttemptsRef.current++;
        setConnectionStatus('reconnecting');
        
        // –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞: 1s, 2s, 4s, 8s, 16s, 30s, 30s...
        const baseDelay = options?.reconnectDelay ?? 1000;
        const delay = Math.min(baseDelay * Math.pow(2, reconnectAttemptsRef.current - 1), 30000);
        
        console.log(`üîÅ Reconnecting after error... (attempt ${reconnectAttemptsRef.current}/${maxReconnectAttempts}, delay: ${delay}ms)`);
        
        reconnectTimeoutRef.current = window.setTimeout(() => {
          reconnectTimeoutRef.current = null;
          connect();
        }, delay);
      }
      
      safeClose();
    };
  };

  useEffect(() => {
    // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    safeClose();
    clearAllTimers();
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    setMessages([]);
    setOnlineUsers([]);
    setUserCount(0);
    setIsConnected(false);
    setConnectionStatus('disconnected');
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥–∏
    reconnectBlockedRef.current = false;
    reconnectAttemptsRef.current = 0;
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –ø–µ—Ä–µ–¥ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º
    const timeoutId = setTimeout(() => {
      connect();
    }, 100);

    return () => {
      clearTimeout(timeoutId);
      safeClose();
      clearAllTimers();
    };
  }, [realm, username]);

  const sendMessage = (text: string) => {
    const sock = socketRef.current;
    if (sock?.readyState === WebSocket.OPEN) {
      sock.send(JSON.stringify({ realm, user: username, text }));
    } else {
      console.warn("Cannot send message ‚Äî socket not open.");
    }
  };

  const manualReconnect = () => {
    // –û—á–∏—â–∞–µ–º –≤—Å–µ —Ç–∞–π–º–∞—É—Ç—ã –∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã
    clearAllTimers();
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫
    reconnectAttemptsRef.current = 0;
    
    // –û—á–∏—â–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Å–æ–∫–µ—Ç
    socketRef.current = null;
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    reconnectBlockedRef.current = false;
    
    console.log("üîÑ Manual reconnect initiated");
    connect();
  };

  return { 
    messages, 
    sendMessage, 
    userCount, 
    onlineUsers, 
    isConnected, 
    connectionStatus,
    manualReconnect 
  };
};

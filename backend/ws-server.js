import { WebSocketServer, WebSocket } from "ws";
import { createServer } from "http";
import redis from "redis";
import dotenv from "dotenv";

dotenv.config();

const PORT = process.env.WS_PORT || 8080;
const server = createServer();
const wss = new WebSocketServer({ server });

const redisClient = redis.createClient({ url: process.env.REDIS_URL });
await redisClient.connect();

const realmClients = new Map();
const usernames = new Map();
const busyNames = new Set();
// Grace period –¥–ª—è –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –Ω–∏–∫–∞
const pendingNickRelease = new Map(); // name -> timeoutId
const NICK_GRACE_PERIOD = 10000; // 10 —Å–µ–∫—É–Ω–¥

// –ó–∞—â–∏—Ç–∞ –æ—Ç —á–∞—Å—Ç—ã—Ö –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
const recentConnections = new Map(); // username -> timestamp
const CONNECTION_COOLDOWN = 2000; // 2 —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è–º–∏

// –ó–∞—â–∏—Ç–∞ –æ—Ç DDoS –∞—Ç–∞–∫
const connectionAttempts = new Map(); // IP -> { count, firstAttempt }
const MAX_CONNECTIONS_PER_IP = 20; // –ú–∞–∫—Å–∏–º—É–º 20 –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π —Å –æ–¥–Ω–æ–≥–æ IP (–±—ã–ª–æ 5)
const CONNECTION_WINDOW = 60000; // –ó–∞ 1 –º–∏–Ω—É—Ç—É
const MAX_CONNECTION_RATE = 50; // –ú–∞–∫—Å–∏–º—É–º 50 –ø–æ–ø—ã—Ç–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≤ –º–∏–Ω—É—Ç—É (–±—ã–ª–æ 10)
const ENABLE_DDOS_PROTECTION = process.env.ENABLE_DDOS_PROTECTION !== 'false'; // –ú–æ–∂–Ω–æ –æ—Ç–∫–ª—é—á–∏—Ç—å —á–µ—Ä–µ–∑ env

// Heartbeat –º–µ—Ö–∞–Ω–∏–∑–º
const clientHeartbeats = new Map();
const HEARTBEAT_INTERVAL = 30000; // 30 —Å–µ–∫—É–Ω–¥ (–±—ã–ª–æ 60) - Railway edge-–ø—Ä–æ–∫—Å–∏ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç —á–µ—Ä–µ–∑ ~60—Å

// –î–µ–±–∞—É–Ω—Å –¥–ª—è –ª–æ–≥–æ–≤ –æ—Ç–∫–ª—é—á–µ–Ω–∏–π
const disconnectLogs = new Map();
const LOG_DEBOUNCE_TIME = 5000; // 5 —Å–µ–∫—É–Ω–¥

// Graceful shutdown
let isShuttingDown = false;

process.on('SIGTERM', gracefulShutdown);
process.on('SIGINT', gracefulShutdown);

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è IP –∞–¥—Ä–µ—Å–∞ –∏–∑ HTTP –∑–∞–ø—Ä–æ—Å–∞
function getClientIP(req) {
  // 1. –ë–µ—Ä—ë–º X-Forwarded-For, –µ—Å–ª–∏ –µ—Å—Ç—å (Railway –ø–∏—à–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–º)
  const xff = req.headers["x-forwarded-for"];
  if (xff) {
    // Railway –ø–∏—à–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–º ‚áí –±–µ—Ä—ë–º right-most
    return xff.split(",").pop().trim();
  }
  
  // 2. Fallback ‚Äì X-Real-IP
  const xri = req.headers["x-real-ip"];
  if (xri) return xri.trim();
  
  // 3. –°–æ–≤—Å–µ–º –∫—Ä–∞–π–Ω–∏–π —Å–ª—É—á–∞–π ‚Äì –∞–¥—Ä–µ—Å –ø—Ä–æ–∫—Å–∏
  return req.socket.remoteAddress ?? "unknown";
}

async function gracefulShutdown() {
  console.log('üõë –ù–∞—á–∏–Ω–∞–µ–º graceful shutdown...');
  isShuttingDown = true;
  
  // –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
  wss.clients.forEach((client) => {
    if (client.readyState === WebSocket.OPEN) {
      client.close(1000, 'Server shutdown');
    }
  });
  
  // –ñ–¥–µ–º –∑–∞–∫—Ä—ã—Ç–∏—è –≤—Å–µ—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
  await new Promise((resolve) => {
    wss.close(() => {
      console.log('‚úÖ WebSocket —Å–µ—Ä–≤–µ—Ä –∑–∞–∫—Ä—ã—Ç');
      resolve();
    });
  });
  
  // –ó–∞–∫—Ä—ã–≤–∞–µ–º Redis —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
  await redisClient.quit();
  console.log('‚úÖ Redis —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ');
  
  // –ó–∞–∫—Ä—ã–≤–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä
  server.close(() => {
    console.log('‚úÖ HTTP —Å–µ—Ä–≤–µ—Ä –∑–∞–∫—Ä—ã—Ç');
    process.exit(0);
  });
  
  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –≤—ã—Ö–æ–¥ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
  setTimeout(() => {
    console.log('‚ö†Ô∏è –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ');
    process.exit(1);
  }, 10000);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ heartbeat –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
function setupHeartbeat(ws) {
  ws.isAlive = true;
  ws.on('pong', () => {
    ws.isAlive = true;
  });
  const heartbeatId = setInterval(() => {
    if (ws.isAlive === false) {
      ws.terminate();
      return;
    }
    ws.isAlive = false;
    ws.ping();
  }, HEARTBEAT_INTERVAL);
  clientHeartbeats.set(ws, heartbeatId);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ heartbeat
function clearHeartbeat(ws) {
  ws.isAlive = false;
  const heartbeatId = clientHeartbeats.get(ws);
  if (heartbeatId) {
    clearInterval(heartbeatId);
    clientHeartbeats.delete(ws);
  }
  if (ws.heartbeatTimeoutId) {
    clearTimeout(ws.heartbeatTimeoutId);
    ws.heartbeatTimeoutId = null;
  }
}

wss.on("connection", async (ws, req) => {
  const clientIP = getClientIP(req);
  console.log(`üîå –ù–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å IP: ${clientIP}`);
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º IP –≤ –æ–±—ä–µ–∫—Ç–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
  ws.clientIP = clientIP;
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º DDoS –∑–∞—â–∏—Ç—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞
  if (ENABLE_DDOS_PROTECTION) {
    const now = Date.now();
    const attempts = connectionAttempts.get(clientIP) || { count: 0, firstAttempt: now };
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ –±–æ–ª—å—à–µ –º–∏–Ω—É—Ç—ã
    if (now - attempts.firstAttempt > CONNECTION_WINDOW) {
      attempts.count = 0;
      attempts.firstAttempt = now;
    }
    
    attempts.count++;
    connectionAttempts.set(clientIP, attempts);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã
    if (attempts.count > MAX_CONNECTION_RATE) {
      console.log(`üö´ DDoS protection: Too many connection attempts from ${clientIP} (${attempts.count} in ${Math.round((now - attempts.firstAttempt) / 1000)}s)`);
      ws.close(1008, 'Rate limit exceeded');
      return;
    }
    
    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —ç—Ç–æ–≥–æ IP
    let activeConnectionsFromIP = 0;
    wss.clients.forEach(client => {
      if (client.clientIP === clientIP && client.readyState === WebSocket.OPEN) {
        activeConnectionsFromIP++;
      }
    });
    
    if (activeConnectionsFromIP >= MAX_CONNECTIONS_PER_IP) {
      console.log(`üö´ DDoS protection: Too many active connections from ${clientIP} (${activeConnectionsFromIP})`);
      ws.close(1008, 'Too many connections');
      return;
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –ø—Ä–∏ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    if (attempts.count > MAX_CONNECTION_RATE * 0.7) {
      console.log(`‚ö†Ô∏è Rate limiting: Adding delay for ${clientIP} (${attempts.count} attempts)`);
      await new Promise(resolve => setTimeout(resolve, 1000)); // 1 —Å–µ–∫—É–Ω–¥–∞ –∑–∞–¥–µ—Ä–∂–∫–∏
    }
  }
  
  ws.on("message", async (msg) => {
    try {
      const data = JSON.parse(msg);

      if (data.type === "subscribe") {
        const realm = data.realm;
        const username = data.username;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
        if (!username || username.trim() === '') {
          // –£–±–∏—Ä–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è —Å–ø–∞–º–∞
          ws.send(JSON.stringify({
            type: "error",
            code: "invalid_username",
            message: "Username is required.",
          }));
          ws.close();
          return;
        }

        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞ –æ—Ç –±–æ—Ç–æ–≤ - –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –∏ —Å–∏–º–≤–æ–ª—ã username
        if (username.length < 1 || username.length > 200) {
          console.log(`üö´ Bot protection: Invalid username length from IP ${ws.clientIP}: "${username}"`);
          ws.send(JSON.stringify({
            type: "error",
            code: "invalid_username",
            message: "Username must be 1-200 characters long.",
          }));
          ws.close();
          return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞—â–∏—Ç—É –æ—Ç —á–∞—Å—Ç—ã—Ö –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
        const now = Date.now();
        const lastConnection = recentConnections.get(username);
        if (lastConnection && (now - lastConnection) < CONNECTION_COOLDOWN) {
          console.log(`üö´ Blocking rapid reconnection for ${username} (${now - lastConnection}ms since last)`);
          ws.send(JSON.stringify({
            type: "error",
            code: "rapid_reconnect",
            message: "Please wait before reconnecting.",
          }));
          ws.close();
          return;
        }
        recentConnections.set(username, now);

        // –ï—Å–ª–∏ –Ω–∏–∫ –æ–∂–∏–¥–∞–µ—Ç –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è ‚Äî –æ—Ç–º–µ–Ω—è–µ–º —Ç–∞–π–º–µ—Ä
 
if (busyNames.has(username)) {
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ ‚Äî –µ—Å–ª–∏ —ç—Ç–æ—Ç –Ω–∏–∫ –∑–∞–Ω—è—Ç, –Ω–æ –Ω–∏–∫ –æ–∂–∏–¥–∞–µ—Ç –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –∏–º–µ–Ω–Ω–æ —Å —ç—Ç–æ–≥–æ –∂–µ IP, —Ä–∞–∑—Ä–µ—à–∏ –ø–µ—Ä–µ—Å–µ—Å—Ç—å –Ω–∞ –Ω–∏–∫
  let isReclaim = false;
  if (pendingNickRelease.has(username)) {
    const info = pendingNickRelease.get(username);
    if (info.ip === ws.clientIP) isReclaim = true;
  }
  if (isReclaim) {
    clearTimeout(pendingNickRelease.get(username).timeoutId);
    busyNames.delete(username);
    pendingNickRelease.delete(username);
  } else {
    // –ö–∞–∫ –±—ã–ª–æ ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É
    let waitMs = 0;
    if (pendingNickRelease.has(username)) {
      const timeoutObj = pendingNickRelease.get(username);
      const timeLeft = Math.max(0, NICK_GRACE_PERIOD - (Date.now() - timeoutObj.start));
      waitMs = timeLeft;
    }
    ws.send(JSON.stringify({
      type: "error",
      code: "duplicate_nick",
      message: "This nickname is busy.",
      wait: waitMs,
    }));
    ws.close();
    return;
  }
}


        ws.realm = realm;
        ws.username = username;
       

        // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —Å–æ–∫–µ—Ç
        busyNames.add(username);
        usernames.set(ws, username);

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –≤ —Å–ø–∏—Å–æ–∫
        if (!realmClients.has(realm)) {
          realmClients.set(realm, new Set());
        }
        realmClients.get(realm).add(ws);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
        ws.send(JSON.stringify({ type: "subscribe_success" }));
        console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${username} –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –∫ —á–∞—Ç—É ${realm} ${clientIP}`);

        // –ó–∞–ø—É—Å–∫–∞–µ–º heartbeat –¥–ª—è —ç—Ç–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
        setupHeartbeat(ws);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
        const raw = await redisClient.lRange(`chat:${realm}`, 0, 49);
        const entries = raw.reverse().map((line) => JSON.parse(line));

        if (ws.readyState === WebSocket.OPEN) {
          ws.send(JSON.stringify({ type: "history", entries }));
        }

        // –†–∞—Å—Å—ã–ª–∞–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π –æ–Ω–ª–∞–π–Ω
        broadcastUserCount(realm);
        broadcastOnlineUsers(realm);
        return;
      }

      // –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      const { realm, user, text } = data;
      if (!realm || !user || !text) return;

      const entry = {
        time: new Date().toISOString(),
        realm,
        user,
        text,
      };

      await redisClient.lPush(`chat:${realm}`, JSON.stringify(entry));
      await redisClient.lTrim(`chat:${realm}`, 0, 99);

      wss.clients.forEach((client) => {
        if (client.readyState === 1 && client.realm === realm) {
          client.send(JSON.stringify({ type: "new_message", entry }));
        }
      });
    } catch (e) {
      console.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:", e);
    }
  });

  ws.on("close", (code, reason) => {
    const realm = ws.realm;
    const name  = usernames.get(ws);

    // –û—á–∏—â–∞–µ–º heartbeat
    clearHeartbeat(ws);

    usernames.delete(ws);
    if (name) {
      // –í–º–µ—Å—Ç–æ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –Ω–∏–∫–∞ ‚Äî –∑–∞–¥–µ—Ä–∂–∫–∞
      if (pendingNickRelease.has(name)) clearTimeout(pendingNickRelease.get(name));
      const timeoutId = setTimeout(() => {
        busyNames.delete(name);
        pendingNickRelease.delete(name);
        console.log(`‚è≥ –ù–∏–∫ ${name} –æ—Å–≤–æ–±–æ–∂–¥—ë–Ω –ø–æ—Å–ª–µ grace period`);
      }, NICK_GRACE_PERIOD);
      pendingNickRelease.set(name, { timeoutId, start: Date.now(), ip: ws.clientIP });
    }

    if (realm && realmClients.has(realm)) {
      realmClients.get(realm).delete(ws);
      broadcastUserCount(realm);
      broadcastOnlineUsers(realm);
    }

    // –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –±—ã–ª –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –¥–µ–±–∞—É–Ω—Å–æ–º
    if (name) {
      const now = Date.now();
      const lastLog = disconnectLogs.get(name);

      if (!lastLog || (now - lastLog) > LOG_DEBOUNCE_TIME) {
        console.log(`–ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–∏–ª—Å—è: ${name} (–∫–æ–¥: ${code}, –ø—Ä–∏—á–∏–Ω–∞: ${reason || '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'})`);
        disconnectLogs.set(name, now);
      }
    }
  });

  ws.on("error", (error) => {
    const realm = ws.realm;
    const name  = usernames.get(ws);
    
    // –û—á–∏—â–∞–µ–º heartbeat
    clearHeartbeat(ws);
    
    usernames.delete(ws);
    if (name) busyNames.delete(name);

    if (realm && realmClients.has(realm)) {
      realmClients.get(realm).delete(ws);
      broadcastUserCount(realm);
      broadcastOnlineUsers(realm);
    }
    
    // –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –±—ã–ª –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –¥–µ–±–∞—É–Ω—Å–æ–º
    if (name) {
      const now = Date.now();
      const lastLog = disconnectLogs.get(name);
      
      if (!lastLog || (now - lastLog) > LOG_DEBOUNCE_TIME) {
        console.log(`–ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π: ${name} - ${error.message}`);
        disconnectLogs.set(name, now);
      }
    }
  });
});

// –†–∞—Å—Å—ã–ª–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —á–∞—Ç–µ
function broadcastUserCount(realm) {
  const count = realmClients.get(realm)?.size || 0;
  realmClients.get(realm)?.forEach((client) => {
    if (client.readyState === 1) {
      client.send(JSON.stringify({ type: "user_count", count }));
    }
  });
}
// –ß–∞—Ç–µ—Ä—Å—ã –≤ —á–∞—Ç–µ –∏–º–µ–Ω–∞
function broadcastOnlineUsers(realm) {
  const clients = realmClients.get(realm);

  if (!clients) return;

  const users = [...new Set([...clients].map((c) => c.username))];

  clients.forEach((client) => {
    if (client.readyState === 1) {
      client.send(JSON.stringify({ type: "online_users", users }));
    }
  });
}

// –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –º–µ—Ä—Ç–≤—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
setInterval(() => {
  if (isShuttingDown) return; // –ù–µ –æ—á–∏—â–∞–µ–º –≤–æ –≤—Ä–µ–º—è shutdown
  
  // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è—Ö (—Å—Ç–∞—Ä—à–µ 1 –º–∏–Ω—É—Ç—ã)
  const now = Date.now();
  for (const [username, timestamp] of recentConnections.entries()) {
    if (now - timestamp > 60000) {
      recentConnections.delete(username);
    }
  }
  
  // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ –æ –ø–æ–ø—ã—Ç–∫–∞—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (—Å—Ç–∞—Ä—à–µ 2 –º–∏–Ω—É—Ç)
  for (const [ip, attempts] of connectionAttempts.entries()) {
    if (now - attempts.firstAttempt > 120000) {
      connectionAttempts.delete(ip);
    }
  }
  
  wss.clients.forEach((client) => {
    if (client.readyState !== WebSocket.OPEN) {
      const name = usernames.get(client);
      if (name) {
        clearHeartbeat(client);
        busyNames.delete(name);
        usernames.delete(client);
        console.log(`üßπ –û—á–∏—â–µ–Ω –∑–∞–≤–∏—Å—à–∏–π –Ω–∏–∫: ${name}`);
      }
    }
  });
}, 30000); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥

server.listen(PORT, () => {
  console.log(`‚úÖ WebSocket —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  console.log(`üõ°Ô∏è DDoS protection: ${ENABLE_DDOS_PROTECTION ? 'ENABLED' : 'DISABLED'}`);
  if (ENABLE_DDOS_PROTECTION) {
    console.log(`   - Max connections per IP: ${MAX_CONNECTIONS_PER_IP}`);
    console.log(`   - Max connection rate: ${MAX_CONNECTION_RATE} per minute`);
  }
});
